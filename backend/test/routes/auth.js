/* eslint-disable no-unused-expressions */

import { expect } from 'chai'
import request from 'supertest'

import server from '../../server'
import User from '../../models/user'
import config from '../../config'
import { fakeUser } from '../factories'
import { decodeUserToken } from '../util'
import { signToken, parseToken } from '../../helpers/jwt'

describe('Authentication', () => {
  describe('/auth/login', () => {
    it('redirects logged-out users to SAML endpoint', (done) => {
      request(server)
        .get('/auth/login')
        .expect((res) => {
          expect(res.headers).to.have.property('location')
          expect(
            res.headers.location.indexOf(config.get('auth:saml:entryPoint'))
          ).to.eq(0)
          expect(res.status).to.eq(302)
        })
        .end(done)
    })
  })

  describe('/auth/login/callback', () => {
    it('rejects invalid post bodies', (done) => {
      request(server)
        .post('/auth/login/callback')
        .expect((res) => {
          expect(res.headers).to.have.property('location')
          expect(
            res.headers.location.indexOf(config.get('auth:saml:entryPoint'))
          ).to.eq(0)
          expect(res.status).to.eq(302)
        })
        .end(done)
    })

    it('creates a new user when none exists', (done) => {
      request(server)
        .post('/auth/login/callback')
        .send({SAMLResponse: ''})
        .expect((res) => {
          expect(
            res.headers.location.indexOf(config.get('auth:saml:finalUrl'))
          ).to.eq(0)
          expect(res.headers).to.have.property('set-cookie')
          expect(res.headers['set-cookie'].indexOf('_token_v1')).to.be.gte(0)
        })
        .end(() => {
          // should have made 'user1'
          User.findOne({where: {username: 'user1'}})
            .then((user) => {
              expect(user.username).to.eq('user1')
              expect(user.type).to.eq('STUDENT')
              done()
            })
        })
    })

    it('uses the existing user when one exists', (done) => {
      fakeUser({username: 'user1', type: 'ADMIN'})
        .then((user) => {
          request(server)
            .post('/auth/login/callback')
            .send({SAMLResponse: ''})
            .expect((res) => {
              expect(
                res.headers.location.indexOf(config.get('auth:saml:finalUrl'))
              ).to.eq(0)
              // should have reused 'user1'
              expect(res.headers).to.have.property('set-cookie')
              const cookie = res.headers['set-cookie'][0].split(';')[0] // :(
              const token = cookie.replace('_token_v1=', '')
              const tokenData = decodeUserToken(token)
              expect(tokenData.id).to.eq(user.id)
              expect(tokenData.username).to.eq('user1')
              expect(tokenData.type).to.eq('ADMIN')
            })
            .end(done)
        })
    })
  })

  describe('/auth/downloadToken', () => {
    it('generates a temporary token', () =>
      fakeUser({type: 'ADMIN'})
        .then(user => {
          const token = signToken(user.dataValues)
          return request(server)
            .post('/auth/downloadToken')
            .set('Authorization', `Bearer ${token}`)
            .expect(200)
            .then(res => {
              expect(res.body).to.not.be.empty
              expect(res.body.token).to.exist
              return new Promise((resolve, reject) => {
                parseToken(res.body.token, (err, payload) => {
                  if (err) {
                    reject(err)
                  } else {
                    resolve(payload)
                  }
                })
              })
            })
            .then(payload => {
              expect(payload.username).to.eq(user.username)
              expect(payload.type).to.eq('ADMIN')
            })
        })
    )
  })
})
